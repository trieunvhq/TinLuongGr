///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Tr_PhiPhatSinh'
// Generated by LLBLGen v1.3.5996.26197 Final on: Wednesday, October 27, 2021, 10:55:49 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace CtyTinLuong
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Tr_PhiPhatSinh'.
	/// </summary>
	public class clsTr_PhiPhatSinh : clsDBInteractionBase
	{
		#region Class Member Declarations
			private SqlBoolean		m_bCaLamViec;
			private SqlDouble		m_fTienTru, m_fTienCong;
			private SqlInt32		m_iID_BoPhan, m_iID_PhiPhatSinh, m_iNam, m_iThang;
			private SqlString		m_sTenPhi, m_sDienGiai;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public clsTr_PhiPhatSinh()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>fTienCong. May be SqlDouble.Null</LI>
		///		 <LI>fTienTru. May be SqlDouble.Null</LI>
		///		 <LI>iThang. May be SqlInt32.Null</LI>
		///		 <LI>iNam. May be SqlInt32.Null</LI>
		///		 <LI>sTenPhi. May be SqlString.Null</LI>
		///		 <LI>sDienGiai. May be SqlString.Null</LI>
		///		 <LI>iID_BoPhan. May be SqlInt32.Null</LI>
		///		 <LI>bCaLamViec. May be SqlBoolean.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iID_PhiPhatSinh</LI>
		/// </UL>
		/// </remarks>
		public bool Tr_PhiPhatSinh_Insert()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[Tr_PhiPhatSinh_Insert]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fTienCong", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fTienCong));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fTienTru", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fTienTru));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iThang", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iThang));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iNam", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iNam));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sTenPhi", SqlDbType.NVarChar, 150, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sTenPhi));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sDienGiai", SqlDbType.NVarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDienGiai));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_BoPhan", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_BoPhan));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bCaLamViec", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bCaLamViec));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_PhiPhatSinh", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iID_PhiPhatSinh));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iID_PhiPhatSinh = (SqlInt32)scmCmdToExecute.Parameters["@iID_PhiPhatSinh"].Value;
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsTr_PhiPhatSinh::Insert::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID_PhiPhatSinh</LI>
		///		 <LI>fTienCong. May be SqlDouble.Null</LI>
		///		 <LI>fTienTru. May be SqlDouble.Null</LI>
		///		 <LI>iThang. May be SqlInt32.Null</LI>
		///		 <LI>iNam. May be SqlInt32.Null</LI>
		///		 <LI>sTenPhi. May be SqlString.Null</LI>
		///		 <LI>sDienGiai. May be SqlString.Null</LI>
		///		 <LI>iID_BoPhan. May be SqlInt32.Null</LI>
		///		 <LI>bCaLamViec. May be SqlBoolean.Null</LI>
		/// </UL>
		/// </remarks>
		public bool Tr_PhiPhatSinh_Update()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[Tr_PhiPhatSinh_Update]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_PhiPhatSinh", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_PhiPhatSinh));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fTienCong", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fTienCong));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@fTienTru", SqlDbType.Float, 8, ParameterDirection.Input, false, 38, 0, "", DataRowVersion.Proposed, m_fTienTru));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iThang", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iThang));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iNam", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iNam));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sTenPhi", SqlDbType.NVarChar, 150, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sTenPhi));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sDienGiai", SqlDbType.NVarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDienGiai));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_BoPhan", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_BoPhan));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bCaLamViec", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bCaLamViec));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsTr_PhiPhatSinh::Update::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID_PhiPhatSinh</LI>
		/// </UL>
		/// </remarks>
		public bool Tr_PhiPhatSinh_Delete()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[Tr_PhiPhatSinh_Delete]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_PhiPhatSinh", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_PhiPhatSinh));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsTr_PhiPhatSinh::Delete::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID_PhiPhatSinh</LI>
		/// </UL>
		///		 <LI>iID_PhiPhatSinh</LI>
		///		 <LI>fTienCong</LI>
		///		 <LI>fTienTru</LI>
		///		 <LI>iThang</LI>
		///		 <LI>iNam</LI>
		///		 <LI>sTenPhi</LI>
		///		 <LI>sDienGiai</LI>
		///		 <LI>iID_BoPhan</LI>
		///		 <LI>bCaLamViec</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public DataTable Tr_PhiPhatSinh_SelectOne()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[Tr_PhiPhatSinh_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("Tr_PhiPhatSinh");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_PhiPhatSinh", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_PhiPhatSinh));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				if(dtToReturn.Rows.Count > 0)
				{
					m_iID_PhiPhatSinh = (Int32)dtToReturn.Rows[0]["ID_PhiPhatSinh"];
					m_fTienCong = dtToReturn.Rows[0]["TienCong"] == System.DBNull.Value ? SqlDouble.Null : (double)dtToReturn.Rows[0]["TienCong"];
					m_fTienTru = dtToReturn.Rows[0]["TienTru"] == System.DBNull.Value ? SqlDouble.Null : (double)dtToReturn.Rows[0]["TienTru"];
					m_iThang = dtToReturn.Rows[0]["Thang"] == System.DBNull.Value ? SqlInt32.Null : (Int32)dtToReturn.Rows[0]["Thang"];
					m_iNam = dtToReturn.Rows[0]["Nam"] == System.DBNull.Value ? SqlInt32.Null : (Int32)dtToReturn.Rows[0]["Nam"];
					m_sTenPhi = dtToReturn.Rows[0]["TenPhi"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["TenPhi"];
					m_sDienGiai = dtToReturn.Rows[0]["DienGiai"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["DienGiai"];
					m_iID_BoPhan = dtToReturn.Rows[0]["ID_BoPhan"] == System.DBNull.Value ? SqlInt32.Null : (Int32)dtToReturn.Rows[0]["ID_BoPhan"];
					m_bCaLamViec = dtToReturn.Rows[0]["CaLamViec"] == System.DBNull.Value ? SqlBoolean.Null : (bool)dtToReturn.Rows[0]["CaLamViec"];
				}
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsTr_PhiPhatSinh::SelectOne::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public DataTable Tr_PhiPhatSinh_SelectAll()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[Tr_PhiPhatSinh_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("Tr_PhiPhatSinh");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsTr_PhiPhatSinh::SelectAll::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlInt32 iID_PhiPhatSinh
		{
			get
			{
				return m_iID_PhiPhatSinh;
			}
			set
			{
				SqlInt32 iID_PhiPhatSinhTmp = (SqlInt32)value;
				if(iID_PhiPhatSinhTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iID_PhiPhatSinh", "iID_PhiPhatSinh can't be NULL");
				}
				m_iID_PhiPhatSinh = value;
			}
		}


		public SqlDouble fTienCong
		{
			get
			{
				return m_fTienCong;
			}
			set
			{
				SqlDouble fTienCongTmp = (SqlDouble)value;
				if(fTienCongTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("fTienCong", "fTienCong can't be NULL");
				}
				m_fTienCong = value;
			}
		}


		public SqlDouble fTienTru
		{
			get
			{
				return m_fTienTru;
			}
			set
			{
				SqlDouble fTienTruTmp = (SqlDouble)value;
				if(fTienTruTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("fTienTru", "fTienTru can't be NULL");
				}
				m_fTienTru = value;
			}
		}


		public SqlInt32 iThang
		{
			get
			{
				return m_iThang;
			}
			set
			{
				SqlInt32 iThangTmp = (SqlInt32)value;
				if(iThangTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iThang", "iThang can't be NULL");
				}
				m_iThang = value;
			}
		}


		public SqlInt32 iNam
		{
			get
			{
				return m_iNam;
			}
			set
			{
				SqlInt32 iNamTmp = (SqlInt32)value;
				if(iNamTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iNam", "iNam can't be NULL");
				}
				m_iNam = value;
			}
		}


		public SqlString sTenPhi
		{
			get
			{
				return m_sTenPhi;
			}
			set
			{
				SqlString sTenPhiTmp = (SqlString)value;
				if(sTenPhiTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sTenPhi", "sTenPhi can't be NULL");
				}
				m_sTenPhi = value;
			}
		}


		public SqlString sDienGiai
		{
			get
			{
				return m_sDienGiai;
			}
			set
			{
				SqlString sDienGiaiTmp = (SqlString)value;
				if(sDienGiaiTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sDienGiai", "sDienGiai can't be NULL");
				}
				m_sDienGiai = value;
			}
		}


		public SqlInt32 iID_BoPhan
		{
			get
			{
				return m_iID_BoPhan;
			}
			set
			{
				SqlInt32 iID_BoPhanTmp = (SqlInt32)value;
				if(iID_BoPhanTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iID_BoPhan", "iID_BoPhan can't be NULL");
				}
				m_iID_BoPhan = value;
			}
		}


		public SqlBoolean bCaLamViec
		{
			get
			{
				return m_bCaLamViec;
			}
			set
			{
				SqlBoolean bCaLamViecTmp = (SqlBoolean)value;
				if(bCaLamViecTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("bCaLamViec", "bCaLamViec can't be NULL");
				}
				m_bCaLamViec = value;
			}
		}
		#endregion
	}
}
