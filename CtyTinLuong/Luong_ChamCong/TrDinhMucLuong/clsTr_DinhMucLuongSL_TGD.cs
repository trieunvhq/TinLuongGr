///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Tr_DinhMucLuongSL_TGD'
// Generated by LLBLGen v1.3.5996.26197 Final on: Sunday, September 26, 2021, 12:22:30 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace CtyTinLuong
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Tr_DinhMucLuongSL_TGD'.
	/// </summary>
	public class clsTr_DinhMucLuongSL_TGD : clsDBInteractionBase
	{
		#region Class Member Declarations
			private SqlBoolean		m_bNgungTheoDoi;
			private SqlDecimal		m_dcLoaiHang3, m_dcLoaiHang2, m_dcLoaiHang1, m_dcLoaiHang4, m_dcLoaiHang7, m_dcLoaiHang6, m_dcLoaiHang5, m_dcGiaNghia2, m_dcGiaNgia, m_dcNCBat6, m_dcThoKimBat3, m_dcNCBat6Buoc;
			private SqlInt32		m_iID_DinhMucLuong;
			private SqlString		m_sDienGiai, m_sMaDinhMucLuong;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public clsTr_DinhMucLuongSL_TGD()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>sMaDinhMucLuong. May be SqlString.Null</LI>
		///		 <LI>sDienGiai. May be SqlString.Null</LI>
		///		 <LI>dcGiaNgia. May be SqlDecimal.Null</LI>
		///		 <LI>dcGiaNghia2. May be SqlDecimal.Null</LI>
		///		 <LI>dcNCBat6. May be SqlDecimal.Null</LI>
		///		 <LI>dcNCBat6Buoc. May be SqlDecimal.Null</LI>
		///		 <LI>dcThoKimBat3. May be SqlDecimal.Null</LI>
		///		 <LI>dcLoaiHang1. May be SqlDecimal.Null</LI>
		///		 <LI>dcLoaiHang2. May be SqlDecimal.Null</LI>
		///		 <LI>dcLoaiHang3. May be SqlDecimal.Null</LI>
		///		 <LI>dcLoaiHang4. May be SqlDecimal.Null</LI>
		///		 <LI>dcLoaiHang5. May be SqlDecimal.Null</LI>
		///		 <LI>dcLoaiHang6. May be SqlDecimal.Null</LI>
		///		 <LI>dcLoaiHang7. May be SqlDecimal.Null</LI>
		///		 <LI>bNgungTheoDoi. May be SqlBoolean.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iID_DinhMucLuong</LI>
		/// </UL>
		/// </remarks>
		public bool Tr_DinhMucLuongSL_TGD_Insert()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[Tr_DinhMucLuongSL_TGD_Insert]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sMaDinhMucLuong", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaDinhMucLuong));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sDienGiai", SqlDbType.NVarChar, 350, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDienGiai));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcGiaNgia", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 0, "", DataRowVersion.Proposed, m_dcGiaNgia));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcGiaNghia2", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 0, "", DataRowVersion.Proposed, m_dcGiaNghia2));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcNCBat6", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 0, "", DataRowVersion.Proposed, m_dcNCBat6));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcNCBat6Buoc", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 0, "", DataRowVersion.Proposed, m_dcNCBat6Buoc));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcThoKimBat3", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 0, "", DataRowVersion.Proposed, m_dcThoKimBat3));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcLoaiHang1", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 0, "", DataRowVersion.Proposed, m_dcLoaiHang1));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcLoaiHang2", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 0, "", DataRowVersion.Proposed, m_dcLoaiHang2));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcLoaiHang3", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 0, "", DataRowVersion.Proposed, m_dcLoaiHang3));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcLoaiHang4", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 0, "", DataRowVersion.Proposed, m_dcLoaiHang4));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcLoaiHang5", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 0, "", DataRowVersion.Proposed, m_dcLoaiHang5));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcLoaiHang6", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 0, "", DataRowVersion.Proposed, m_dcLoaiHang6));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcLoaiHang7", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 0, "", DataRowVersion.Proposed, m_dcLoaiHang7));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bNgungTheoDoi", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bNgungTheoDoi));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_DinhMucLuong", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iID_DinhMucLuong));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iID_DinhMucLuong = (SqlInt32)scmCmdToExecute.Parameters["@iID_DinhMucLuong"].Value;
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsTr_DinhMucLuongSL_TGD::Insert::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID_DinhMucLuong</LI>
		///		 <LI>sMaDinhMucLuong. May be SqlString.Null</LI>
		///		 <LI>sDienGiai. May be SqlString.Null</LI>
		///		 <LI>dcGiaNgia. May be SqlDecimal.Null</LI>
		///		 <LI>dcGiaNghia2. May be SqlDecimal.Null</LI>
		///		 <LI>dcNCBat6. May be SqlDecimal.Null</LI>
		///		 <LI>dcNCBat6Buoc. May be SqlDecimal.Null</LI>
		///		 <LI>dcThoKimBat3. May be SqlDecimal.Null</LI>
		///		 <LI>dcLoaiHang1. May be SqlDecimal.Null</LI>
		///		 <LI>dcLoaiHang2. May be SqlDecimal.Null</LI>
		///		 <LI>dcLoaiHang3. May be SqlDecimal.Null</LI>
		///		 <LI>dcLoaiHang4. May be SqlDecimal.Null</LI>
		///		 <LI>dcLoaiHang5. May be SqlDecimal.Null</LI>
		///		 <LI>dcLoaiHang6. May be SqlDecimal.Null</LI>
		///		 <LI>dcLoaiHang7. May be SqlDecimal.Null</LI>
		///		 <LI>bNgungTheoDoi. May be SqlBoolean.Null</LI>
		/// </UL>
		/// </remarks>
		public bool Tr_DinhMucLuongSL_TGD_Update()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[Tr_DinhMucLuongSL_TGD_Update]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_DinhMucLuong", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_DinhMucLuong));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sMaDinhMucLuong", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaDinhMucLuong));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sDienGiai", SqlDbType.NVarChar, 350, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDienGiai));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcGiaNgia", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 0, "", DataRowVersion.Proposed, m_dcGiaNgia));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcGiaNghia2", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 0, "", DataRowVersion.Proposed, m_dcGiaNghia2));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcNCBat6", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 0, "", DataRowVersion.Proposed, m_dcNCBat6));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcNCBat6Buoc", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 0, "", DataRowVersion.Proposed, m_dcNCBat6Buoc));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcThoKimBat3", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 0, "", DataRowVersion.Proposed, m_dcThoKimBat3));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcLoaiHang1", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 0, "", DataRowVersion.Proposed, m_dcLoaiHang1));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcLoaiHang2", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 0, "", DataRowVersion.Proposed, m_dcLoaiHang2));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcLoaiHang3", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 0, "", DataRowVersion.Proposed, m_dcLoaiHang3));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcLoaiHang4", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 0, "", DataRowVersion.Proposed, m_dcLoaiHang4));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcLoaiHang5", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 0, "", DataRowVersion.Proposed, m_dcLoaiHang5));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcLoaiHang6", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 0, "", DataRowVersion.Proposed, m_dcLoaiHang6));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@dcLoaiHang7", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 0, "", DataRowVersion.Proposed, m_dcLoaiHang7));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bNgungTheoDoi", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bNgungTheoDoi));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsTr_DinhMucLuongSL_TGD::Update::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID_DinhMucLuong</LI>
		/// </UL>
		/// </remarks>
		public bool Tr_DinhMucLuongSL_TGD_Delete()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[Tr_DinhMucLuongSL_TGD_Delete]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_DinhMucLuong", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_DinhMucLuong));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsTr_DinhMucLuongSL_TGD::Delete::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID_DinhMucLuong</LI>
		/// </UL>
		///		 <LI>iID_DinhMucLuong</LI>
		///		 <LI>sMaDinhMucLuong</LI>
		///		 <LI>sDienGiai</LI>
		///		 <LI>dcGiaNgia</LI>
		///		 <LI>dcGiaNghia2</LI>
		///		 <LI>dcNCBat6</LI>
		///		 <LI>dcNCBat6Buoc</LI>
		///		 <LI>dcThoKimBat3</LI>
		///		 <LI>dcLoaiHang1</LI>
		///		 <LI>dcLoaiHang2</LI>
		///		 <LI>dcLoaiHang3</LI>
		///		 <LI>dcLoaiHang4</LI>
		///		 <LI>dcLoaiHang5</LI>
		///		 <LI>dcLoaiHang6</LI>
		///		 <LI>dcLoaiHang7</LI>
		///		 <LI>bNgungTheoDoi</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public DataTable Tr_DinhMucLuongSL_TGD_SelectOne()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[Tr_DinhMucLuongSL_TGD_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("Tr_DinhMucLuongSL_TGD");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_DinhMucLuong", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_DinhMucLuong));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				if(dtToReturn.Rows.Count > 0)
				{
					m_iID_DinhMucLuong = (Int32)dtToReturn.Rows[0]["ID_DinhMucLuong"];
					m_sMaDinhMucLuong = dtToReturn.Rows[0]["MaDinhMucLuong"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["MaDinhMucLuong"];
					m_sDienGiai = dtToReturn.Rows[0]["DienGiai"] == System.DBNull.Value ? SqlString.Null : (string)dtToReturn.Rows[0]["DienGiai"];
					m_dcGiaNgia = dtToReturn.Rows[0]["GiaNgia"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["GiaNgia"];
					m_dcGiaNghia2 = dtToReturn.Rows[0]["GiaNghia2"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["GiaNghia2"];
					m_dcNCBat6 = dtToReturn.Rows[0]["NCBat6"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["NCBat6"];
					m_dcNCBat6Buoc = dtToReturn.Rows[0]["NCBat6Buoc"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["NCBat6Buoc"];
					m_dcThoKimBat3 = dtToReturn.Rows[0]["ThoKimBat3"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["ThoKimBat3"];
					m_dcLoaiHang1 = dtToReturn.Rows[0]["LoaiHang1"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["LoaiHang1"];
					m_dcLoaiHang2 = dtToReturn.Rows[0]["LoaiHang2"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["LoaiHang2"];
					m_dcLoaiHang3 = dtToReturn.Rows[0]["LoaiHang3"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["LoaiHang3"];
					m_dcLoaiHang4 = dtToReturn.Rows[0]["LoaiHang4"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["LoaiHang4"];
					m_dcLoaiHang5 = dtToReturn.Rows[0]["LoaiHang5"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["LoaiHang5"];
					m_dcLoaiHang6 = dtToReturn.Rows[0]["LoaiHang6"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["LoaiHang6"];
					m_dcLoaiHang7 = dtToReturn.Rows[0]["LoaiHang7"] == System.DBNull.Value ? SqlDecimal.Null : (Decimal)dtToReturn.Rows[0]["LoaiHang7"];
					m_bNgungTheoDoi = dtToReturn.Rows[0]["NgungTheoDoi"] == System.DBNull.Value ? SqlBoolean.Null : (bool)dtToReturn.Rows[0]["NgungTheoDoi"];
				}
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsTr_DinhMucLuongSL_TGD::SelectOne::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// </remarks>
		public DataTable Tr_DinhMucLuongSL_TGD_SelectAll()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[Tr_DinhMucLuongSL_TGD_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("Tr_DinhMucLuongSL_TGD");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsTr_DinhMucLuongSL_TGD::SelectAll::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlInt32 iID_DinhMucLuong
		{
			get
			{
				return m_iID_DinhMucLuong;
			}
			set
			{
				SqlInt32 iID_DinhMucLuongTmp = (SqlInt32)value;
				if(iID_DinhMucLuongTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("iID_DinhMucLuong", "iID_DinhMucLuong can't be NULL");
				}
				m_iID_DinhMucLuong = value;
			}
		}


		public SqlString sMaDinhMucLuong
		{
			get
			{
				return m_sMaDinhMucLuong;
			}
			set
			{
				SqlString sMaDinhMucLuongTmp = (SqlString)value;
				if(sMaDinhMucLuongTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sMaDinhMucLuong", "sMaDinhMucLuong can't be NULL");
				}
				m_sMaDinhMucLuong = value;
			}
		}


		public SqlString sDienGiai
		{
			get
			{
				return m_sDienGiai;
			}
			set
			{
				SqlString sDienGiaiTmp = (SqlString)value;
				if(sDienGiaiTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("sDienGiai", "sDienGiai can't be NULL");
				}
				m_sDienGiai = value;
			}
		}


		public SqlDecimal dcGiaNgia
		{
			get
			{
				return m_dcGiaNgia;
			}
			set
			{
				SqlDecimal dcGiaNgiaTmp = (SqlDecimal)value;
				if(dcGiaNgiaTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("dcGiaNgia", "dcGiaNgia can't be NULL");
				}
				m_dcGiaNgia = value;
			}
		}


		public SqlDecimal dcGiaNghia2
		{
			get
			{
				return m_dcGiaNghia2;
			}
			set
			{
				SqlDecimal dcGiaNghia2Tmp = (SqlDecimal)value;
				if(dcGiaNghia2Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("dcGiaNghia2", "dcGiaNghia2 can't be NULL");
				}
				m_dcGiaNghia2 = value;
			}
		}


		public SqlDecimal dcNCBat6
		{
			get
			{
				return m_dcNCBat6;
			}
			set
			{
				SqlDecimal dcNCBat6Tmp = (SqlDecimal)value;
				if(dcNCBat6Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("dcNCBat6", "dcNCBat6 can't be NULL");
				}
				m_dcNCBat6 = value;
			}
		}


		public SqlDecimal dcNCBat6Buoc
		{
			get
			{
				return m_dcNCBat6Buoc;
			}
			set
			{
				SqlDecimal dcNCBat6BuocTmp = (SqlDecimal)value;
				if(dcNCBat6BuocTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("dcNCBat6Buoc", "dcNCBat6Buoc can't be NULL");
				}
				m_dcNCBat6Buoc = value;
			}
		}


		public SqlDecimal dcThoKimBat3
		{
			get
			{
				return m_dcThoKimBat3;
			}
			set
			{
				SqlDecimal dcThoKimBat3Tmp = (SqlDecimal)value;
				if(dcThoKimBat3Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("dcThoKimBat3", "dcThoKimBat3 can't be NULL");
				}
				m_dcThoKimBat3 = value;
			}
		}


		public SqlDecimal dcLoaiHang1
		{
			get
			{
				return m_dcLoaiHang1;
			}
			set
			{
				SqlDecimal dcLoaiHang1Tmp = (SqlDecimal)value;
				if(dcLoaiHang1Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("dcLoaiHang1", "dcLoaiHang1 can't be NULL");
				}
				m_dcLoaiHang1 = value;
			}
		}


		public SqlDecimal dcLoaiHang2
		{
			get
			{
				return m_dcLoaiHang2;
			}
			set
			{
				SqlDecimal dcLoaiHang2Tmp = (SqlDecimal)value;
				if(dcLoaiHang2Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("dcLoaiHang2", "dcLoaiHang2 can't be NULL");
				}
				m_dcLoaiHang2 = value;
			}
		}


		public SqlDecimal dcLoaiHang3
		{
			get
			{
				return m_dcLoaiHang3;
			}
			set
			{
				SqlDecimal dcLoaiHang3Tmp = (SqlDecimal)value;
				if(dcLoaiHang3Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("dcLoaiHang3", "dcLoaiHang3 can't be NULL");
				}
				m_dcLoaiHang3 = value;
			}
		}


		public SqlDecimal dcLoaiHang4
		{
			get
			{
				return m_dcLoaiHang4;
			}
			set
			{
				SqlDecimal dcLoaiHang4Tmp = (SqlDecimal)value;
				if(dcLoaiHang4Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("dcLoaiHang4", "dcLoaiHang4 can't be NULL");
				}
				m_dcLoaiHang4 = value;
			}
		}


		public SqlDecimal dcLoaiHang5
		{
			get
			{
				return m_dcLoaiHang5;
			}
			set
			{
				SqlDecimal dcLoaiHang5Tmp = (SqlDecimal)value;
				if(dcLoaiHang5Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("dcLoaiHang5", "dcLoaiHang5 can't be NULL");
				}
				m_dcLoaiHang5 = value;
			}
		}


		public SqlDecimal dcLoaiHang6
		{
			get
			{
				return m_dcLoaiHang6;
			}
			set
			{
				SqlDecimal dcLoaiHang6Tmp = (SqlDecimal)value;
				if(dcLoaiHang6Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("dcLoaiHang6", "dcLoaiHang6 can't be NULL");
				}
				m_dcLoaiHang6 = value;
			}
		}


		public SqlDecimal dcLoaiHang7
		{
			get
			{
				return m_dcLoaiHang7;
			}
			set
			{
				SqlDecimal dcLoaiHang7Tmp = (SqlDecimal)value;
				if(dcLoaiHang7Tmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("dcLoaiHang7", "dcLoaiHang7 can't be NULL");
				}
				m_dcLoaiHang7 = value;
			}
		}


		public SqlBoolean bNgungTheoDoi
		{
			get
			{
				return m_bNgungTheoDoi;
			}
			set
			{
				SqlBoolean bNgungTheoDoiTmp = (SqlBoolean)value;
				if(bNgungTheoDoiTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("bNgungTheoDoi", "bNgungTheoDoi can't be NULL");
				}
				m_bNgungTheoDoi = value;
			}
		}
		#endregion
	}
}
