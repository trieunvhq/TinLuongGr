///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'NhanSu_tbNhanSu'
// Generated by LLBLGen v1.3.5996.26197 Final on: Thursday, May 13, 2021, 2:56:15 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace CtyTinLuong
{
	/// <summary>
	/// Purpose: Data Access class for the table 'NhanSu_tbNhanSu'.
	/// </summary>
	public partial class clsNhanSu_tbNhanSu : clsDBInteractionBase
	{
		#region Class Member Declarations
			private SqlBoolean		m_bTonTai, m_bLuongSanLuong, m_bLuongCongNhat, m_bNgungTheoDoi, m_bGioiTinh;
			private SqlDateTime		m_daNgaySinh, m_daNgayCapCMT, m_daNgayChinhThuc, m_daNgayBatDau;
            private Nullable<SqlDateTime> m_daNgayThoiViec, m_daNgayNopBHXH;
            private SqlInt32		m_iID_DinhMucLuong_CongNhat, m_iID_DinhMuc_Luong_SanLuong, m_iID_NhanSu, m_iID_BoPhan, m_iID_ChucVu;
			private SqlString		m_sTenNhanVien, m_sSoDienThoai, m_sMaNhanVien, m_sLoaiHopDongLaoDong, m_sDanToc, m_sSoCMT, m_sQuocTich, m_sTonGiao, m_sGhiChu, m_sNoiCapCMT, m_sNoiSinh;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public clsNhanSu_tbNhanSu()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID_ChucVu</LI>
		///		 <LI>sLoaiHopDongLaoDong</LI>
		///		 <LI>iID_BoPhan</LI>
		///		 <LI>sMaNhanVien</LI>
		///		 <LI>sTenNhanVien</LI>
		///		 <LI>sSoDienThoai</LI>
		///		 <LI>daNgayBatDau</LI>
		///		 <LI>daNgayChinhThuc</LI>
		///		 <LI>daNgayThoiViec</LI>
		///		 <LI>daNgayNopBHXH</LI>
		///		 <LI>daNgaySinh</LI>
		///		 <LI>sNoiSinh</LI>
		///		 <LI>bGioiTinh</LI>
		///		 <LI>sDanToc</LI>
		///		 <LI>sTonGiao</LI>
		///		 <LI>sQuocTich</LI>
		///		 <LI>sSoCMT</LI>
		///		 <LI>daNgayCapCMT</LI>
		///		 <LI>sNoiCapCMT</LI>
		///		 <LI>sGhiChu</LI>
		///		 <LI>bLuongCongNhat</LI>
		///		 <LI>bLuongSanLuong</LI>
		///		 <LI>bTonTai</LI>
		///		 <LI>bNgungTheoDoi</LI>
		///		 <LI>iID_DinhMucLuong_CongNhat</LI>
		///		 <LI>iID_DinhMuc_Luong_SanLuong. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iID_NhanSu</LI>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_NhanSu_tbNhanSu_Insert]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_ChucVu", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_ChucVu));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sLoaiHopDongLaoDong", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sLoaiHopDongLaoDong));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_BoPhan", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_BoPhan));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sMaNhanVien", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaNhanVien));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sTenNhanVien", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sTenNhanVien));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSoDienThoai", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSoDienThoai));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daNgayBatDau", SqlDbType.SmallDateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daNgayBatDau));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daNgayChinhThuc", SqlDbType.SmallDateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daNgayChinhThuc));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daNgayThoiViec", SqlDbType.SmallDateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daNgayThoiViec));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daNgayNopBHXH", SqlDbType.SmallDateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daNgayNopBHXH));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daNgaySinh", SqlDbType.SmallDateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daNgaySinh));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sNoiSinh", SqlDbType.NVarChar, 150, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sNoiSinh));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bGioiTinh", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bGioiTinh));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sDanToc", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDanToc));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sTonGiao", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sTonGiao));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sQuocTich", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sQuocTich));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSoCMT", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSoCMT));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daNgayCapCMT", SqlDbType.SmallDateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daNgayCapCMT));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sNoiCapCMT", SqlDbType.NVarChar, 150, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sNoiCapCMT));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sGhiChu", SqlDbType.NVarChar, 350, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sGhiChu));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bLuongCongNhat", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bLuongCongNhat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bLuongSanLuong", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bLuongSanLuong));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bTonTai", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTonTai));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bNgungTheoDoi", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bNgungTheoDoi));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_DinhMucLuong_CongNhat", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_DinhMucLuong_CongNhat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_DinhMuc_Luong_SanLuong", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_DinhMuc_Luong_SanLuong));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_NhanSu", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iID_NhanSu));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iID_NhanSu = (SqlInt32)scmCmdToExecute.Parameters["@iID_NhanSu"].Value;
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_NhanSu_tbNhanSu_Insert' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsNhanSu_tbNhanSu::Insert::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID_NhanSu</LI>
		///		 <LI>iID_ChucVu</LI>
		///		 <LI>sLoaiHopDongLaoDong</LI>
		///		 <LI>iID_BoPhan</LI>
		///		 <LI>sMaNhanVien</LI>
		///		 <LI>sTenNhanVien</LI>
		///		 <LI>sSoDienThoai</LI>
		///		 <LI>daNgayBatDau</LI>
		///		 <LI>daNgayChinhThuc</LI>
		///		 <LI>daNgayThoiViec</LI>
		///		 <LI>daNgayNopBHXH</LI>
		///		 <LI>daNgaySinh</LI>
		///		 <LI>sNoiSinh</LI>
		///		 <LI>bGioiTinh</LI>
		///		 <LI>sDanToc</LI>
		///		 <LI>sTonGiao</LI>
		///		 <LI>sQuocTich</LI>
		///		 <LI>sSoCMT</LI>
		///		 <LI>daNgayCapCMT</LI>
		///		 <LI>sNoiCapCMT</LI>
		///		 <LI>sGhiChu</LI>
		///		 <LI>bLuongCongNhat</LI>
		///		 <LI>bLuongSanLuong</LI>
		///		 <LI>bTonTai</LI>
		///		 <LI>bNgungTheoDoi</LI>
		///		 <LI>iID_DinhMucLuong_CongNhat</LI>
		///		 <LI>iID_DinhMuc_Luong_SanLuong. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_NhanSu_tbNhanSu_Update]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_NhanSu", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_NhanSu));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_ChucVu", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_ChucVu));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sLoaiHopDongLaoDong", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sLoaiHopDongLaoDong));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_BoPhan", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_BoPhan));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sMaNhanVien", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sMaNhanVien));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sTenNhanVien", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sTenNhanVien));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSoDienThoai", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSoDienThoai));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daNgayBatDau", SqlDbType.SmallDateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daNgayBatDau));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daNgayChinhThuc", SqlDbType.SmallDateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daNgayChinhThuc));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daNgayThoiViec", SqlDbType.SmallDateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daNgayThoiViec));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daNgayNopBHXH", SqlDbType.SmallDateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daNgayNopBHXH));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daNgaySinh", SqlDbType.SmallDateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daNgaySinh));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sNoiSinh", SqlDbType.NVarChar, 150, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sNoiSinh));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bGioiTinh", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bGioiTinh));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sDanToc", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sDanToc));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sTonGiao", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sTonGiao));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sQuocTich", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sQuocTich));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sSoCMT", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sSoCMT));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@daNgayCapCMT", SqlDbType.SmallDateTime, 3, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_daNgayCapCMT));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sNoiCapCMT", SqlDbType.NVarChar, 150, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sNoiCapCMT));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@sGhiChu", SqlDbType.NVarChar, 350, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_sGhiChu));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bLuongCongNhat", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bLuongCongNhat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bLuongSanLuong", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bLuongSanLuong));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bTonTai", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bTonTai));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@bNgungTheoDoi", SqlDbType.Bit, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, m_bNgungTheoDoi));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_DinhMucLuong_CongNhat", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_DinhMucLuong_CongNhat));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_DinhMuc_Luong_SanLuong", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_DinhMuc_Luong_SanLuong));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_NhanSu_tbNhanSu_Update' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsNhanSu_tbNhanSu::Update::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID_NhanSu</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_NhanSu_tbNhanSu_Delete]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_NhanSu", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_NhanSu));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				scmCmdToExecute.ExecuteNonQuery();
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_NhanSu_tbNhanSu_Delete' reported the ErrorCode: " + m_iErrorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsNhanSu_tbNhanSu::Delete::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>iID_NhanSu</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>iErrorCode</LI>
		///		 <LI>iID_NhanSu</LI>
		///		 <LI>iID_ChucVu</LI>
		///		 <LI>sLoaiHopDongLaoDong</LI>
		///		 <LI>iID_BoPhan</LI>
		///		 <LI>sMaNhanVien</LI>
		///		 <LI>sTenNhanVien</LI>
		///		 <LI>sSoDienThoai</LI>
		///		 <LI>daNgayBatDau</LI>
		///		 <LI>daNgayChinhThuc</LI>
		///		 <LI>daNgayThoiViec</LI>
		///		 <LI>daNgayNopBHXH</LI>
		///		 <LI>daNgaySinh</LI>
		///		 <LI>sNoiSinh</LI>
		///		 <LI>bGioiTinh</LI>
		///		 <LI>sDanToc</LI>
		///		 <LI>sTonGiao</LI>
		///		 <LI>sQuocTich</LI>
		///		 <LI>sSoCMT</LI>
		///		 <LI>daNgayCapCMT</LI>
		///		 <LI>sNoiCapCMT</LI>
		///		 <LI>sGhiChu</LI>
		///		 <LI>bLuongCongNhat</LI>
		///		 <LI>bLuongSanLuong</LI>
		///		 <LI>bTonTai</LI>
		///		 <LI>bNgungTheoDoi</LI>
		///		 <LI>iID_DinhMucLuong_CongNhat</LI>
		///		 <LI>iID_DinhMuc_Luong_SanLuong</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_NhanSu_tbNhanSu_SelectOne]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("NhanSu_tbNhanSu");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iID_NhanSu", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, m_iID_NhanSu));
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_NhanSu_tbNhanSu_SelectOne' reported the ErrorCode: " + m_iErrorCode);
				}

				if(dtToReturn.Rows.Count > 0)
				{
					m_iID_NhanSu = (Int32)dtToReturn.Rows[0]["ID_NhanSu"];
					m_iID_ChucVu = (Int32)dtToReturn.Rows[0]["ID_ChucVu"];
					m_sLoaiHopDongLaoDong = (string)dtToReturn.Rows[0]["LoaiHopDongLaoDong"];
					m_iID_BoPhan = (Int32)dtToReturn.Rows[0]["ID_BoPhan"];
					m_sMaNhanVien = (string)dtToReturn.Rows[0]["MaNhanVien"];
					m_sTenNhanVien = (string)dtToReturn.Rows[0]["TenNhanVien"];
					m_sSoDienThoai = (string)dtToReturn.Rows[0]["SoDienThoai"];
					m_daNgayBatDau = (DateTime)dtToReturn.Rows[0]["NgayBatDau"];
					m_daNgayChinhThuc = (DateTime)dtToReturn.Rows[0]["NgayChinhThuc"];

                    if (dtToReturn.Rows[0]["NgayThoiViec"].ToString() == "") m_daNgayThoiViec = new DateTime(1900, 1, 1);
                    else m_daNgayThoiViec = (DateTime)dtToReturn.Rows[0]["NgayThoiViec"];

                    if (dtToReturn.Rows[0]["NgayNopBHXH"].ToString() == "") m_daNgayNopBHXH = new DateTime(1900, 1, 1);
                    else m_daNgayNopBHXH = (DateTime)dtToReturn.Rows[0]["NgayNopBHXH"];

					m_daNgaySinh = (DateTime)dtToReturn.Rows[0]["NgaySinh"];
					m_sNoiSinh = (string)dtToReturn.Rows[0]["NoiSinh"];
					m_bGioiTinh = (bool)dtToReturn.Rows[0]["GioiTinh"];
					m_sDanToc = (string)dtToReturn.Rows[0]["DanToc"];
					m_sTonGiao = (string)dtToReturn.Rows[0]["TonGiao"];
					m_sQuocTich = (string)dtToReturn.Rows[0]["QuocTich"];
					m_sSoCMT = (string)dtToReturn.Rows[0]["SoCMT"];
					m_daNgayCapCMT = (DateTime)dtToReturn.Rows[0]["NgayCapCMT"];
					m_sNoiCapCMT = (string)dtToReturn.Rows[0]["NoiCapCMT"];
					m_sGhiChu = (string)dtToReturn.Rows[0]["GhiChu"];
					m_bLuongCongNhat = (bool)dtToReturn.Rows[0]["LuongCongNhat"];
					m_bLuongSanLuong = (bool)dtToReturn.Rows[0]["LuongSanLuong"];
					m_bTonTai = (bool)dtToReturn.Rows[0]["TonTai"];
					m_bNgungTheoDoi = (bool)dtToReturn.Rows[0]["NgungTheoDoi"];
					m_iID_DinhMucLuong_CongNhat = (Int32)dtToReturn.Rows[0]["ID_DinhMucLuong_CongNhat"];
					m_iID_DinhMuc_Luong_SanLuong = dtToReturn.Rows[0]["ID_DinhMuc_Luong_SanLuong"] == System.DBNull.Value ? SqlInt32.Null : (Int32)dtToReturn.Rows[0]["ID_DinhMuc_Luong_SanLuong"];
				}
				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsNhanSu_tbNhanSu::SelectOne::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


        //
        public bool SelectOne_MaNhanVien(string MaNhanVien)
        {
            SqlCommand scmCmdToExecute = new SqlCommand();
            scmCmdToExecute.CommandText = "dbo.[Tr_NhanSu_tbNhanSu_SelectOne_MaNhanVien]";
            scmCmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable dtToReturn = new DataTable("NhanSu_tbNhanSu");
            SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

            // Use base class' connection object
            scmCmdToExecute.Connection = m_scoMainConnection;

            try
            {
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sMaNhanVien", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, MaNhanVien));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

                // Open connection.
                m_scoMainConnection.Open();

                // Execute query.
                sdaAdapter.Fill(dtToReturn);
                m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

                if (m_iErrorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'Tr_NhanSu_tbNhanSu_SelectOne_MaNhanVien' reported the ErrorCode: " + m_iErrorCode);
                }

                if (dtToReturn.Rows.Count > 0)
                {
                    return true;
                }
                else return false;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("clsNhanSu_tbNhanSu::Tr_NhanSu_tbNhanSu_SelectOne_MaNhanVien::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                m_scoMainConnection.Close();
                scmCmdToExecute.Dispose();
                sdaAdapter.Dispose();
            }
        }


        //
        public bool SelectOne_TenNhanVien(string TenNhanVien)
        {
            SqlCommand scmCmdToExecute = new SqlCommand();
            scmCmdToExecute.CommandText = "dbo.[Tr_NhanSu_tbNhanSu_SelectOne_TenNhanVien]";
            scmCmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable dtToReturn = new DataTable("NhanSu_tbNhanSu");
            SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

            // Use base class' connection object
            scmCmdToExecute.Connection = m_scoMainConnection;

            try
            {
                scmCmdToExecute.Parameters.Add(new SqlParameter("@sTenNhanVien", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, TenNhanVien));
                scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

                // Open connection.
                m_scoMainConnection.Open();

                // Execute query.
                sdaAdapter.Fill(dtToReturn);
                m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

                if (m_iErrorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'Tr_NhanSu_tbNhanSu_SelectOne_TenNhanVien' reported the ErrorCode: " + m_iErrorCode);
                }

                if (dtToReturn.Rows.Count > 0)
                {
                    return true;
                }
                else return false;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("clsNhanSu_tbNhanSu::Tr_NhanSu_tbNhanSu_SelectOne_TenNhanVien::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                m_scoMainConnection.Close();
                scmCmdToExecute.Dispose();
                sdaAdapter.Dispose();
            }
        }

        /// <summary>
        /// Purpose: SelectAll method. This method will Select all rows from the table.
        /// </summary>
        /// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
        /// <remarks>
        /// Properties set after a succesful call of this method: 
        /// <UL>
        ///		 <LI>iErrorCode</LI>
        /// </UL>
        /// </remarks>
        public override DataTable SelectAll()
		{
			SqlCommand	scmCmdToExecute = new SqlCommand();
			scmCmdToExecute.CommandText = "dbo.[pr_NhanSu_tbNhanSu_SelectAll]";
			scmCmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable dtToReturn = new DataTable("NhanSu_tbNhanSu");
			SqlDataAdapter sdaAdapter = new SqlDataAdapter(scmCmdToExecute);

			// Use base class' connection object
			scmCmdToExecute.Connection = m_scoMainConnection;

			try
			{
				scmCmdToExecute.Parameters.Add(new SqlParameter("@iErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, m_iErrorCode));

				// Open connection.
				m_scoMainConnection.Open();

				// Execute query.
				sdaAdapter.Fill(dtToReturn);
				m_iErrorCode = (SqlInt32)scmCmdToExecute.Parameters["@iErrorCode"].Value;

				if(m_iErrorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'pr_NhanSu_tbNhanSu_SelectAll' reported the ErrorCode: " + m_iErrorCode);
				}

				return dtToReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("clsNhanSu_tbNhanSu::SelectAll::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				m_scoMainConnection.Close();
				scmCmdToExecute.Dispose();
				sdaAdapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlInt32 iID_NhanSu
		{
			get
			{
				return m_iID_NhanSu;
			}
			set
			{
				m_iID_NhanSu = value;
			}
		}


		public SqlInt32 iID_ChucVu
		{
			get
			{
				return m_iID_ChucVu;
			}
			set
			{
				m_iID_ChucVu = value;
			}
		}


		public SqlString sLoaiHopDongLaoDong
		{
			get
			{
				return m_sLoaiHopDongLaoDong;
			}
			set
			{
				m_sLoaiHopDongLaoDong = value;
			}
		}


		public SqlInt32 iID_BoPhan
		{
			get
			{
				return m_iID_BoPhan;
			}
			set
			{
				m_iID_BoPhan = value;
			}
		}


		public SqlString sMaNhanVien
		{
			get
			{
				return m_sMaNhanVien;
			}
			set
			{
				m_sMaNhanVien = value;
			}
		}


		public SqlString sTenNhanVien
		{
			get
			{
				return m_sTenNhanVien;
			}
			set
			{
				m_sTenNhanVien = value;
			}
		}


		public SqlString sSoDienThoai
		{
			get
			{
				return m_sSoDienThoai;
			}
			set
			{
				m_sSoDienThoai = value;
			}
		}


		public SqlDateTime daNgayBatDau
		{
			get
			{
				return m_daNgayBatDau;
			}
			set
			{
				m_daNgayBatDau = value;
			}
		}


		public SqlDateTime daNgayChinhThuc
		{
			get
			{
				return m_daNgayChinhThuc;
			}
			set
			{
				m_daNgayChinhThuc = value;
			}
		}


		public Nullable<SqlDateTime> daNgayThoiViec
		{
			get
			{
				return m_daNgayThoiViec;
			}
			set
			{
				m_daNgayThoiViec = value;
			}
		}


		public Nullable<SqlDateTime> daNgayNopBHXH
		{
			get
			{
				return m_daNgayNopBHXH;
			}
			set
			{
				m_daNgayNopBHXH = value;
			}
		}


		public SqlDateTime daNgaySinh
		{
			get
			{
				return m_daNgaySinh;
			}
			set
			{
				m_daNgaySinh = value;
			}
		}


		public SqlString sNoiSinh
		{
			get
			{
				return m_sNoiSinh;
			}
			set
			{
				m_sNoiSinh = value;
			}
		}


		public SqlBoolean bGioiTinh
		{
			get
			{
				return m_bGioiTinh;
			}
			set
			{
				m_bGioiTinh = value;
			}
		}


		public SqlString sDanToc
		{
			get
			{
				return m_sDanToc;
			}
			set
			{
				m_sDanToc = value;
			}
		}


		public SqlString sTonGiao
		{
			get
			{
				return m_sTonGiao;
			}
			set
			{
				m_sTonGiao = value;
			}
		}


		public SqlString sQuocTich
		{
			get
			{
				return m_sQuocTich;
			}
			set
			{
				m_sQuocTich = value;
			}
		}


		public SqlString sSoCMT
		{
			get
			{
				return m_sSoCMT;
			}
			set
			{
				m_sSoCMT = value;
			}
		}


		public SqlDateTime daNgayCapCMT
		{
			get
			{
				return m_daNgayCapCMT;
			}
			set
			{
				m_daNgayCapCMT = value;
			}
		}


		public SqlString sNoiCapCMT
		{
			get
			{
				return m_sNoiCapCMT;
			}
			set
			{
				m_sNoiCapCMT = value;
			}
		}


		public SqlString sGhiChu
		{
			get
			{
				return m_sGhiChu;
			}
			set
			{
				m_sGhiChu = value;
			}
		}


		public SqlBoolean bLuongCongNhat
		{
			get
			{
				return m_bLuongCongNhat;
			}
			set
			{
				m_bLuongCongNhat = value;
			}
		}


		public SqlBoolean bLuongSanLuong
		{
			get
			{
				return m_bLuongSanLuong;
			}
			set
			{
				m_bLuongSanLuong = value;
			}
		}


		public SqlBoolean bTonTai
		{
			get
			{
				return m_bTonTai;
			}
			set
			{
				m_bTonTai = value;
			}
		}


		public SqlBoolean bNgungTheoDoi
		{
			get
			{
				return m_bNgungTheoDoi;
			}
			set
			{
				m_bNgungTheoDoi = value;
			}
		}


		public SqlInt32 iID_DinhMucLuong_CongNhat
		{
			get
			{
				return m_iID_DinhMucLuong_CongNhat;
			}
			set
			{
				m_iID_DinhMucLuong_CongNhat = value;
			}
		}


		public SqlInt32 iID_DinhMuc_Luong_SanLuong
		{
			get
			{
				return m_iID_DinhMuc_Luong_SanLuong;
			}
			set
			{
				m_iID_DinhMuc_Luong_SanLuong = value;
			}
		}
		#endregion
	}
}
